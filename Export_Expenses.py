import tinydb
import os
import datetime
import platform
import subprocess


def HeaderHTML():
    return '''<!DOCTYPE html>
<html>
<head>
    <title>Expense Report</title>
    <style>
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
        }
        th, td {
            padding: 5px;
        }
        p {
            font-size: 12px;
            font-family: Arial, Helvetica, sans-serif;
        }
        h1 {
            font-size: 24px;
            font-family: Arial, Helvetica, sans-serif;
        }
        h2 {
            font-size: 18px;
            font-family: Arial, Helvetica, sans-serif;
        }
    </style>
    <link rel="icon" href="file:''' + os.path.join(os.path.realpath(os.path.dirname(__file__)),
                                                   'Icon.png') + '''" type="image/png">
</head>'''  # Return the HTML header with the icon set to the local program icon.


def FooterHTML():
    return '''</html>'''  # Return the HTML footer


def BodyHeadHTML():
    return '''<body>
    <img src="file:''' + os.path.join(os.path.realpath(os.path.dirname(__file__)),
                                      'Icon.png') + '''" alt="Laser OMS Icon" width="100" style="margin-right: 0">
    <h1>Expense Report</h1>
    <p> This report was generated by Laser OMS on ''' + str(datetime.datetime.now()) + '''</p>
    <hr>'''  # Return the HTML body header block


def BodyFootHTML():
    return '''</body>'''  # Return the HTML body footer block


def ExpenseToHTML(expenses):
    code = ''

    total = 0
    for expense in expenses:
        code += '<h2>' + expense['expense_name'] + '</h2> \n'
        code += '<p>Expense Date: ' + expense['expense_date'] + '</p> <br>\n'
        code += '<p>Expense Total: $' + \
            str(float(expense['expense_quantity']) *
                float(expense['expense_unit_price'])) + '</p> <br> \n'
        code += '<p>Expense Quantity: ' + \
            str(expense['expense_quantity']) + ' at unit price: $' + \
            str(expense['expense_unit_price']) + '</p> <br> \n'
        code += '<p>Expense Description: ' + \
            expense['expense_notes'] + '</p> <br> \n'
        if expense['expense_image_path'] != '':  # If there is an image, add it to the report
            filetype = expense['expense_image_path'].split('.')[-1]
            if filetype == 'pdf':
                code += '<p>Expense Image: <embed src="file:' + \
                    expense['expense_image_path'] + \
                        '''" type="application/pdf" width="500" height="500"></p> <br> \n'''
            elif filetype == 'jpg' or filetype == 'jpeg' or filetype == 'png':
                code += '<p>Expense Image: <img src="file:' + \
                    expense['expense_image_path'] + \
                    '''" alt="Expense Image" width="500"></p> <br> \n'''
            else:
                code += '<p>Expense Image: <a href="file:' + \
                    expense['expense_image_path'] + \
                    '''">Expense Image</a></p> <br> \n'''
        code += '<hr> \n'
        total += float(expense['expense_quantity']) * \
            float(expense['expense_unit_price'])

    code += '<h2>Total Expenses: $' + str(total) + '</h2> \n'
    return code


def MakeExpenseReport(app, database, Year=None, Month=None, ShowNonVerified=False):
    # Get the Expenses table from the database
    expenses = database.table('Expenses')

    if ShowNonVerified:
        ActiveExpenses = expenses.search(
            tinydb.where('process_status') == 'UTILIZE')
    else:
        ActiveExpenses = expenses.search((tinydb.where('process_status') == 'UTILIZE') & (
            ~(tinydb.where('expense_image_path') == '')))

    Year = str(Year)  # Convert the year and month to strings for comparison
    Month = str(Month)

    if Year == 'None':  # If no year is specified, show all expenses
        ShowExpenses = ActiveExpenses
    else:
        if Month == 'None':  # If no month is specified, show all expenses for the year
            ShowExpenses = [
                expense for expense in ActiveExpenses if Year in expense['expense_date'].split('-')[2]]
        else:  # If a month is specified, show all expenses for the year and month
            ShowExpenses = [expense for expense in ActiveExpenses if (Year in expense['expense_date'].split(
                '-')[2]) and (Month in expense['expense_date'].split('-')[1])]

    # Generate the HTML for the report
    HTMLData = HeaderHTML() + BodyHeadHTML() + ExpenseToHTML(ShowExpenses) + \
        BodyFootHTML() + FooterHTML()

    NameModifier = ''  # create a string to modify the file name based on the year and month
    if Year != None:
        NameModifier += Year
    if Month != None:
        NameModifier += Month

    # get a save file path from the user
    path = app.select_file(title='Save Expense Report', folder='.', filetypes=[
                           ["All files", "*.*"]], save=True, filename=NameModifier + 'ExpenseReport.html')

    if path != None:  # if the user didn't cancel the save dialog
        try:  # try to save the file
            with open(path, 'w') as f:
                f.write(HTMLData)
                f.close()
        except:
            app.error('Error', 'Unable to save file!')
            return

    # open the file in the default browser
    if platform.system() == 'Darwin':       # macOS
        subprocess.call(('open', path))
    elif platform.system() == 'Windows':    # Windows
        os.startfile(path)
    else:                                   # linux variants
        subprocess.call(('xdg-open', path))
